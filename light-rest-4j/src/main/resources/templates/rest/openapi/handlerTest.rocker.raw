@import java.util.Map
@import com.jsoniter.any.Any
@import java.util.stream.Collectors
@args (String handlerPackage, Map<String, Object> map)
package @handlerPackage;

import com.fasterxml.jackson.databind.JsonNode;
import com.networknt.client.Http2Client;
import com.networknt.exception.ClientException;
import com.networknt.openapi.OpenApiOperation;
import com.networknt.schema.ValidationMessage;
import io.undertow.UndertowOptions;
import io.undertow.client.ClientConnection;
import io.undertow.client.ClientRequest;
import io.undertow.client.ClientResponse;
import io.undertow.util.HeaderValues;
import io.undertow.util.Headers;
import io.undertow.util.HttpString;
import io.undertow.util.Methods;
import org.junit.Assert;
import org.junit.ClassRule;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.xnio.IoUtils;
import org.xnio.OptionMap;
import java.net.URI;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.atomic.AtomicReference;

@with (className = map.get("handlerName") + "Test",
       method = map.get("handlerName") + "Test()",
       loggerName = map.get("handlerName") + "Test" + ".class",
       httpMethod = map.get("method"),
       hasBody = ("POST".equals(map.get("method").toString()) || "PUT".equals(map.get("method").toString()) || "PATCH".equals(map.get("method").toString())),
       path = map.get("normalizedPath"),
       supportedStatusCodesStr = map.get("supportedStatusCodesStr"),
       headerNameValueMap = (Map)map.get("headerNameValueMap")) {
public class @className extends HandlerTestBase{
    @@ClassRule
    public static TestServer server = TestServer.getInstance();

    static final Logger logger = LoggerFactory.getLogger(@loggerName);
    static final boolean enableHttp2 = server.getServerConfig().isEnableHttp2();
    static final boolean enableHttps = server.getServerConfig().isEnableHttps();
    static final int httpPort = server.getServerConfig().getHttpPort();
    static final int httpsPort = server.getServerConfig().getHttpsPort();
    static final String url = enableHttp2 || enableHttps ? "https://localhost:" + httpsPort : "http://localhost:" + httpPort;
    static final String DEFAULT_CONTENT_TYPE = "*/*";
    static final String JSON_CONTENT_TYPE = "application/json";

    @@Test
    public void test@method throws ClientException {

        final Http2Client client = Http2Client.getInstance();
        final CountDownLatch latch = new CountDownLatch(1);
        final ClientConnection connection;
        try {
            connection = client.connect(new URI(url), Http2Client.WORKER, Http2Client.SSL, Http2Client.BUFFER_POOL, enableHttp2 ? OptionMap.create(UndertowOptions.ENABLE_HTTP2, true): OptionMap.EMPTY).get();
        } catch (Exception e) {
            throw new ClientException(e);
        }
        final AtomicReference<ClientResponse> reference = new AtomicReference<>();
        String requestUri = "@path";
        OpenApiOperation operation = getOpenApiOperation(requestUri, "@httpMethod.toString().toLowerCase()");
        try {
            ClientRequest request = new ClientRequest().setPath(requestUri).setMethod(Methods.@httpMethod);
            @if(hasBody) {
            request.getRequestHeaders().put(Headers.CONTENT_TYPE, JSON_CONTENT_TYPE);
            request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, "chunked");
            //customized header parameters @for((String key, Object item): headerNameValueMap) {
            request.getRequestHeaders().put(new HttpString("@key"), "@item");}
            connection.sendRequest(request, client.createClientCallback(reference, latch, "{\"content\": \"request body to be replaced\"}"));
            } else {
            connection.sendRequest(request, client.createClientCallback(reference, latch));
            }
            latch.await();
        } catch (Exception e) {
            logger.error("Exception: ", e);
            throw new ClientException(e);
        } finally {
            IoUtils.safeClose(connection);
        }
        String body = reference.get().getAttachment(Http2Client.RESPONSE_BODY);
        Optional<HeaderValues> contentTypeName = Optional.ofNullable(reference.get().getResponseHeaders().get(Headers.CONTENT_TYPE));
        int statusCode = reference.get().getResponseCode();

        if(statusCode == 200) {
            Assert.assertTrue("Content-Type is not in Response Header", contentTypeName.isPresent());
            Assert.assertNotNull("No Response Body", body);
        }  else {
            if(contentTypeName.isPresent()) {
                Assert.assertNotNull(body);
            }
        }
        String contentTypeStr = contentTypeName.isPresent() ? contentTypeName.get().getFirst() : DEFAULT_CONTENT_TYPE;
        JsonNode schemaObj = getContentSchema(operation, String.valueOf(statusCode), contentTypeStr);
        if(schemaObj == null) {
            schemaObj = getContentSchema(operation, "default", contentTypeStr);
        }
        if(schemaObj != null) {
            Set<ValidationMessage> messages = doValidate(body, schemaObj);
            Assert.assertEquals(0, messages.size());
        }
    }
}
}
