@import java.util.Map
@import com.jsoniter.any.Any
@import java.util.stream.Collectors;
@args (String handlerPackage, Map<String, Object> map)
package @handlerPackage;

import com.fasterxml.jackson.databind.JsonNode;
import com.networknt.client.Http2Client;
import com.networknt.config.Config;
import com.networknt.exception.ApiException;
import com.networknt.exception.ClientException;
import com.networknt.jsonoverlay.Overlay;
import com.networknt.oas.model.*;
import com.networknt.oas.model.impl.SchemaImpl;
import com.networknt.openapi.ApiNormalisedPath;
import com.networknt.openapi.NormalisedPath;
import com.networknt.openapi.OpenApiHelper;
import com.networknt.openapi.OpenApiOperation;
import com.networknt.schema.JsonSchema;
import com.networknt.schema.JsonSchemaFactory;
import com.networknt.schema.SchemaValidatorsConfig;
import com.networknt.schema.ValidationMessage;
import io.undertow.UndertowOptions;
import io.undertow.client.ClientConnection;
import io.undertow.client.ClientRequest;
import io.undertow.client.ClientResponse;
import io.undertow.util.HeaderValues;
import io.undertow.util.Headers;
import io.undertow.util.Methods;
import org.junit.Assert;
import org.junit.ClassRule;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.xnio.IoUtils;
import org.xnio.OptionMap;
import java.net.URI;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.atomic.AtomicReference;

@with (className = map.get("handlerName") + "Test",
       method = map.get("handlerName") + "Test()",
       loggerName = map.get("handlerName") + "Test" + ".class",
       httpMethod = map.get("method"),
       hasBody = ("POST".equals(map.get("method").toString()) || "PUT".equals(map.get("method").toString()) || "PATCH".equals(map.get("method").toString())),
       path = map.get("normalizedPath"),
       supportedStatusCodesStr = map.get("supportedStatusCodesStr")) {
public class @className {
    @@ClassRule
    public static TestServer server = TestServer.getInstance();

    static final Logger logger = LoggerFactory.getLogger(@loggerName);
    static final boolean enableHttp2 = server.getServerConfig().isEnableHttp2();
    static final boolean enableHttps = server.getServerConfig().isEnableHttps();
    static final int httpPort = server.getServerConfig().getHttpPort();
    static final int httpsPort = server.getServerConfig().getHttpsPort();
    static final String url = enableHttp2 || enableHttps ? "https://localhost:" + httpsPort : "http://localhost:" + httpPort;

    @@Test
    public void test@method throws ClientException, ApiException {

        final Http2Client client = Http2Client.getInstance();
        final CountDownLatch latch = new CountDownLatch(1);
        final ClientConnection connection;
        try {
            connection = client.connect(new URI(url), Http2Client.WORKER, Http2Client.SSL, Http2Client.BUFFER_POOL, enableHttp2 ? OptionMap.create(UndertowOptions.ENABLE_HTTP2, true): OptionMap.EMPTY).get();
        } catch (Exception e) {
            throw new ClientException(e);
        }
        final AtomicReference<ClientResponse> reference = new AtomicReference<>();
        String requestUri = "@path";
        OpenApiOperation operation = getOpenApiOperation(requestUri, "@httpMethod.toString().toLowerCase()");
        try {
            ClientRequest request = new ClientRequest().setPath(requestUri).setMethod(Methods.@httpMethod);
            @if(hasBody) {
            request.getRequestHeaders().put(Headers.CONTENT_TYPE, "application/json");
            request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, "chunked");
            connection.sendRequest(request, client.createClientCallback(reference, latch, "{\"content\": \"request body to be replaced\"}"));
            } else {
            connection.sendRequest(request, client.createClientCallback(reference, latch));
            }
            latch.await();
        } catch (Exception e) {
            logger.error("Exception: ", e);
            throw new ClientException(e);
        } finally {
            IoUtils.safeClose(connection);
        }
        String body = reference.get().getAttachment(Http2Client.RESPONSE_BODY);
        Optional<HeaderValues> contentTypeName = Optional.ofNullable(reference.get().getResponseHeaders().get(Headers.CONTENT_TYPE));
        int statusCode = reference.get().getResponseCode();

        if(statusCode == 200) {
            Assert.assertTrue(contentTypeName.isPresent());
            Assert.assertNotNull(body);
        }  else {
            if(contentTypeName.isPresent()) {
                Assert.assertNotNull(body);
            }
        }
        JsonNode schemaObj = getContentSchema(operation, String.valueOf(statusCode), contentTypeName.get().getFirst());
        if(schemaObj == null) {
            schemaObj = getContentSchema(operation, "default", contentTypeName.get().getFirst());
        }
        if(schemaObj != null) {
            Set<ValidationMessage> messages = doValidate(body, schemaObj);
            Assert.assertEquals(0, messages.size());
        }
    }

    private OpenApiOperation getOpenApiOperation(String uri, String httpMethod) {
        NormalisedPath requestPath = new ApiNormalisedPath(uri);
        Optional<NormalisedPath> maybeApiPath = OpenApiHelper.findMatchingApiPath(requestPath);
        if (!maybeApiPath.isPresent()) {
            return null;
        }

        final NormalisedPath openApiPathString = maybeApiPath.get();
        final Path path = OpenApiHelper.openApi3.getPath(openApiPathString.original());

        final Operation operation = path.getOperation(httpMethod);
        return new OpenApiOperation(openApiPathString, path, httpMethod, operation);
    }

    private Set<ValidationMessage> doValidate(Object value, JsonNode schema) {
        SchemaValidatorsConfig config = new SchemaValidatorsConfig();
        JsonSchema jsonSchema = JsonSchemaFactory.getInstance().getSchema(schema, config);
        final JsonNode content = Config.getInstance().getMapper().valueToTree(value);
        return jsonSchema.validate(content);
    }

    private JsonNode getContentSchema(OpenApiOperation operation, String statusCode, String mediaType) {
        Schema schema;
        Optional<Response> response = Optional.ofNullable(operation.getOperation().getResponse(String.valueOf(statusCode)));
        if(response.isPresent()) {
            Optional<MediaType> mediaType1 = Optional.ofNullable(response.get().getContentMediaType(mediaType));
            if(mediaType1.isPresent()) {
                schema = mediaType1.get().getSchema();
                JsonNode schemaNode = schema == null ? null : Overlay.toJson((SchemaImpl)schema);
                return schemaNode;
            }
        }
        return null;
    }
}
}
