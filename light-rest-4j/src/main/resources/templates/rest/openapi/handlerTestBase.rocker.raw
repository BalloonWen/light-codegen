package com.networknt.schedule.handler;

import com.fasterxml.jackson.databind.JsonNode;
import com.networknt.config.Config;
import com.networknt.jsonoverlay.Overlay;
import com.networknt.oas.model.*;
import com.networknt.oas.model.impl.SchemaImpl;
import com.networknt.openapi.ApiNormalisedPath;
import com.networknt.openapi.NormalisedPath;
import com.networknt.openapi.OpenApiHelper;
import com.networknt.openapi.OpenApiOperation;
import com.networknt.schema.JsonSchema;
import com.networknt.schema.JsonSchemaFactory;
import com.networknt.schema.SchemaValidatorsConfig;
import com.networknt.schema.ValidationMessage;
import java.util.Optional;
import java.util.Set;

public class HandlerTestBase {
    protected OpenApiOperation getOpenApiOperation(String uri, String httpMethod) {
        NormalisedPath requestPath = new ApiNormalisedPath(uri);
        Optional<NormalisedPath> maybeApiPath = OpenApiHelper.findMatchingApiPath(requestPath);
        if (!maybeApiPath.isPresent()) {
            return null;
        }

        final NormalisedPath openApiPathString = maybeApiPath.get();
        final Path path = OpenApiHelper.openApi3.getPath(openApiPathString.original());

        final Operation operation = path.getOperation(httpMethod);
        return new OpenApiOperation(openApiPathString, path, httpMethod, operation);
    }

    protected Set<ValidationMessage> doValidate(Object value, JsonNode schema) {
        SchemaValidatorsConfig config = new SchemaValidatorsConfig();
        JsonSchema jsonSchema = JsonSchemaFactory.getInstance().getSchema(schema, config);
        final JsonNode content = Config.getInstance().getMapper().valueToTree(value);
        return jsonSchema.validate(content);
    }

    protected JsonNode getContentSchema(OpenApiOperation operation, String statusCode, String mediaType) {
        Schema schema;
        Optional<Response> response = Optional.ofNullable(operation.getOperation().getResponse(String.valueOf(statusCode)));
        if(response.isPresent()) {
            Optional<MediaType> mediaType1 = Optional.ofNullable(response.get().getContentMediaType(mediaType));
            if(mediaType1.isPresent()) {
                schema = mediaType1.get().getSchema();
                JsonNode schemaNode = schema == null ? null : Overlay.toJson((SchemaImpl)schema);
                return schemaNode;
            }
        }
        return null;
    }
}